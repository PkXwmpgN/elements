<?xml version="1.0" encoding="UTF-8"?>
<program name="fire_raymarching">
    <shaders>
        <vertex><![CDATA[
            attribute vec2 a_vertex_xy;
            attribute vec2 a_vertex_uv;

            varying vec2 v_uv;

            void main()
            {
                gl_Position = vec4(a_vertex_xy, 0.0, 1.0);
                v_uv = a_vertex_uv;
            }
        ]]></vertex>

        <fragment><![CDATA[
            precision highp float;

            varying vec2 v_uv;

            uniform sampler2D u_noise;
            uniform lowp vec2 u_texel;
            uniform lowp float u_dt;
            uniform lowp float u_intensity;
            uniform lowp float u_covering;
            uniform lowp vec3 u_color_hot;
            uniform lowp vec3 u_color_cold;

            const float raymarch_eps = 0.02;

            float fn_noise(vec3 x)
            {
                vec3 p = floor(x);
                vec3 f = cos((x - p) * 3.141592653589793) * (-0.5);
                vec2 uv = p.xy + f.xy;
                vec4 rg = texture2D(u_noise, uv * 0.00390625);
                return mix(rg.y, rg.x, f.z);
            }

            float fn_sphere(vec3 p, float r)
            {
                return length(p) - r;
            }

            float fn_flame(vec3 p)
            {
                float d = fn_sphere(vec3((1.0 - u_covering) * p.x, u_intensity * (-1.0 - p.y), p.z), u_intensity);
                return d + (fn_noise(p + vec3(0.0, u_dt * 2.0, 0.0)) + fn_noise(p * 2.0) * 0.25) * p.y * 0.5;
            }

            vec4 fn_raymarch(vec3 org, vec3 dir)
            {
                float d = 0.0;
                float glow = 0.0;

                vec3  p = org;

                for(int i = 0; i < 128; ++i)
                {
                    d = fn_flame(p);
                    d = min(100.0 - length(p), abs(d)) + raymarch_eps;
                    p += d * dir;
                    if(d < raymarch_eps)
                    {
                        glow = float(i) / 64.0;
                        break;
                    }
                }

                return vec4(p, glow);
            }

            void main()
            {
                vec2 local = v_uv * 2.0 - 1.0;
                if(u_texel.x < u_texel.y)
                    local.x *= u_texel.y / (u_texel.x * 0.8);
                else
                    local.x *= u_texel.x / (u_texel.y);

                vec3 org = vec3(0.0, -2.0, 4.0);
                vec3 dir = normalize(vec3(local.x, -local.y, -2.0));
                vec4 p = fn_raymarch(org, dir);

                vec4 col = mix(vec4(u_color_cold, 1.0), vec4(u_color_hot, 1.0), p.y * 0.02 + 0.4);
                gl_FragColor = mix(vec4(0.0), col, pow(p.w * 2.0, 4.0));
            }
        ]]></fragment>
    </shaders>

    <a_locations>
        <location name="a_vertex_xy" index="0"/>
        <location name="a_vertex_uv" index="1"/>
    </a_locations>

    <u_locations>
        <location name="u_noise" index="0"/>
        <location name="u_dt" index="1"/>
        <location name="u_intensity" index="2"/>
        <location name="u_covering" index="3"/>
        <location name="u_texel" index="4"/>
        <location name="u_color_hot" index="5"/>
        <location name="u_color_cold" index="6"/>
    </u_locations>

</program>